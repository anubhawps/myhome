# #import <...>
snippet Import
abbr #import <>
	#import <${1:Cocoa/Cocoa.h}>${2}
# #import "..."
abbr #import ""
snippet import
	#import "${1:`Filename()`.h}"${2}
# @selector(...)
snippet selector
abbr @selector(:)
	@selector(${1:method}:)${3}
# @"..." string
snippet string
abbr @""
	@"${1}"${2}
# Object
snippet object
abbr <class> *<object> = [<class> alloc];
	${1:NSObject} *${2:foo} = [${3:$1 alloc}]${4};${5}
# NSLog(...)
snippet log
abbr NSLog(@"");
	NSLog(@"${1:%@}"${2});${3}
# Class
snippet interface_implementation
abbr @interface {} @end @implementation {} @end
	@interface ${1:`Filename('', 'someClass')`} : ${2:NSObject}
	{
	}
	@end

	@implementation $1
	${3}
	@end
# Class Interface
snippet interface
abbr @interface {} @end
	@interface ${1:`Filename('', 'someClass')`} : ${2:NSObject}
	{${3}
	}
	${4}
	@end
# Class Implementation
snippet implementation
abbr @implementation {} @end
	@implementation ${1:`Filename('', 'someClass')`}
	${2}
	@end
snippet init
abbr - (id)init {}
	- (id)init {
		[super init];
		return self;
	}
snippet ifself
abbr if (self = [super init]) {}
	if (self = [super init]) {
		${1:/* code */}
	}
	return self;
snippet iboutlet
abbr IBOutlet <class> *<name>;
	IBOutlet ${1:NSSomeClass} *${2:$1};${3}
# Category
snippet category
abbr @interface <class> (<category>) @end @implementation () @end
	@interface ${1:NSObject} (${2:Category})
	@end

	@implementation $1 ($2)
	${3}
	@end
# Category Interface
snippet category_interface
abbr @interface <class> (<category>) @end
	@interface ${1:NSObject} (${2:Category})
	${3}
	@end
# NSArray
snippet array
abbr NSMutableArray *<array> = [NSMutableArray array];
	NSMutableArray *${1:array} = [NSMutableArray array];${2}
# NSDictionary
snippet dictionary
abbr NSMutableDictionary *<dict> = [NSMutableDictionary dictionary];
	NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];${2}
# NSBezierPath
snippet bezier
abbr NSBezierPath *<path> = [NSBezierPath bezierPath];
	NSBezierPath *${1:path} = [NSBezierPath bezierPath];${2}
# Method
snippet method
abbr - ()<method> {}
	- (${1:id})${2:method} {
		${3}
	}
# Method declaration
snippet method_declaration
abbr - ()<method>;
	- (${1:id})${2:method};${3}
# IBAction declaration
snippet ibaction_declaration
abbr - (IBAction)<method>:()sender;
	- (IBAction)${1:method}:(${2:id})sender;${3}
# IBAction method
snippet ibaction
abbr - (IBAction)<method>:()sender;
	- (IBAction)${1:method}:(${2:id})sender
	{
		${3}
	}
# awakeFromNib method
snippet method_wake
abbr - (void)awakeFromNib {}
	- (void)awakeFromNib {
		${1}
	}
# Class Method
snippet method_class
abbr + ()<method> {}
	+ (${1:id})${2:method} {
		${3}
		return nil;
	}
# Sub-method (Call super)
snippet method_sub
abbr - ()<method>{[super <method>];}
	- (${1:id})${2:method} {
		[super $2];${3}
		return self;
	}
# Method: Initialize
snippet method_initialize
abbr + (void)initialize {}
	+ (void)initialize {
		[[NSUserDefaults standardUserDefaults] registerDefaults:[NSDictionary dictionaryWIthObjectsAndKeys:
			${1}@"value", @"key",
			nil]];
	}
# Accessor Methods For:
# Object
snippet method_accessor
abbr - ()<thing> {} - (void)set<thing>:(){}
	- (${1:id})${2:thing} {
		return $2;
	}

	- (void)set$2:($1)${3:new$2}
	{
		[$3 retain];
		[$2 release];
		$2 = $3;
	}${4}
# for (object in array)
snippet forin
abbr for (in) {}
	for (${1:Class} *${2:some$1} in ${3:array}) {
		${4}
	}
snippet forarray
abbr for (index < arrayCount) {}
	unsigned int ${1:object}Count = [${2:array} count];

	for (unsigned int index = 0; index < $1Count; index++) {
		${3:id} $1 = [$2 $1AtIndex:index];
		${4}
	}
# IBOutlet
# @property (Objective-C 2.0)
snippet property
abbr @property () ;
	@property (${1:retain}) ${2:NSSomeClass} ${3:*$2};${4}
# @synthesize (Objective-C 2.0)
snippet synthesize
abbr @synthesize <property>;
	@synthesize ${1:property};${2}
# [[ alloc] init]
snippet alloc
abbr [[<class> alloc] init];
	[[${1:foo} alloc] init${2}];${3}
# retain
snippet retain
abbr [<object> retain];
	[${1:foo} retain];${2}
# release
snippet rel
	[${1:foo} release];
	${2:$1 = nil;}
# autorelease
snippet autorelease
abbr [<object> autorelease];
	[${1:foo} autorelease];
# autorelease pool
snippet pool
abbr NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
	NSAutoreleasePool *${1:pool} = [[NSAutoreleasePool alloc] init];
	${2:/* code */}
	[$1 release];
# Throw an exception
snippet exception
abbr NSException *badness = [NSException];
	NSException *${1:badness} = [NSException
		exceptionWithName:@"${2:$1Name}"
		           reason:@"${3}"
		         userInfo:nil
	];
	[$1 raise];
snippet try
abbr @try {} @catch () {}
	@try {
		${1:/* code */}
	} @catch (NSException *ex) {
		${2:/* code */}
	}
snippet pragma
abbr #pragma mark
	#pragma mark ${1:foo}
snippet class
abbr @class <name>;
	@class ${1:Foo};${2}
snippet color
abbr [[NSColor <color>] set];
	[[NSColor ${1:blackColor}] set];
