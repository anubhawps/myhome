# header
snippet     head
abbr        module author export
prev_word   '^'
    -module(${1:module name}).
    -author('cooldaemon@gmail.com').

    -export([${2:function names}]).
    ${3}

snippet     moddule
abbr        -module()
prev_word   '^'
    -module(${1:module name}).
    ${2}

snippet     author
abbr        -author()
prev_word   '^'
    -author('cooldaemon@gmail.com').
    ${1}

snippet     behaviour
abbr        -behaviour()
prev_word   '^'
    -behaviour(${1:behaviour name}).
    ${2}

snippet     export
abbr        -export()
prev_word   '^'
    -export([${1:function names}]).
    ${2}

snippet     export_all
abbr        -compile()
prev_word   '^'
    -compile(export_all).
    ${1}

snippet     include
abbr        -include()
prev_word   '^'
    -include(${1:module name}).
    ${2}

snippet     include_lib
abbr        -include_lib()
prev_word   '^'
    -include_lib(${1:module name}).
    ${2}

snippet     define 
abbr        -define()
prev_word   '^'
    -define(${1:name}, ${2:value}).
    ${3}

snippet     record
abbr        -record()
prev_word   '^'
    -record(${1:record name}, {${2:field name1}, ${3:field name2}}).

# function
snippet     anonfunction
abbr        fun () -> end.
prev_word   '^'
    fun (${1}) -> ${2:code} end.

snippet     let
abbr        (fun () -> end)().
prev_word   '^'
    (fun (${1}) -> ${3:code} end)(${2}).

snippet     function
abbr        <function name> () -> .
prev_word   '^'
    ${1:function name} (${2}) ->
      ${3:code}.

snippet     gfunction
abbr        <function name> () when <guard> -> .
prev_word   '^'
    ${1:function name} (${2}) when ${3:guard} ->
      ${4:code}.

# conditional branch
snippet     case
abbr        case <code> of -> ; _ -> end.
prev_word   '^'
    case ${1:condition code} of
      ${2:value} -> ${3:code};
      _ -> ${4:other code}
    end.

snippet     if
abbr        if <condition> -> ; true -> end.
prev_word   '^'
    if
      ${1:condition} -> ${2:code};
      true -> ${3:other code}
    end.

snippet     receive
abbr        receive <condition> -> ; _ -> end.
prev_word   '^'
    receive
      ${1:condition} -> ${3:code};
      _ -> ${4:other code}
      after ${2:timeout} -> ${5:timeout code}
    end.

# list
snippet     forearch
abbr        lists:foreach().
prev_word   '^'
     lists:foreach(fun (${2:Elem}) -> ${3:code} end, ${1:List}).

snippet     map
abbr        lists:map().
prev_word   '^'
     lists:map(fun (${2:Elem}) -> ${3:code} end, ${1:List}).

snippet     any
abbr        lists:any().
prev_word   '^'
     lists:any(fun (${2:Elem}) -> ${3:code} end, ${1:List}).

snippet     filter
abbr        lists:filter().
prev_word   '^'
     lists:filter(
       fun
         (${2:Elem}) when ${3:guard} -> true;
         (_) -> false
       end,
       ${1:List}
     ).

snippet     foldl
abbr        lists:foldl().
prev_word   '^'
     lists:foldl(fun (${3:Elem}, ${4:AccIn}) -> ${5:code} end, ${2:Acc0}, ${1:List}).

snippet     foldr
abbr        lists:foldr().
prev_word   '^'
     lists:foldr(fun (${3:Elem}, ${4:AccIn}) -> ${5:code} end, ${2:Acc0}, ${1::ist}).

snippet     list
abbr        [X || X <- <list>].
prev_word   '^'
    [${1:Elem} || ${2:Elem} <- ${3:List}].

# etc..
snippet     puts
abbr        io:fwrite().
prev_word   '^'
    io:fwrite("${2:~p}~n", [${1:value}]).

snippet     spawn
abbr        spawn(<module>, <function>, <args>).
prev_word   '^'
    spawn(${1:module}, ${2:function}, [${3:arg}]).

snippet     spawn_link
abbr        spawn_link(<module>, <function>, <args>).
prev_word   '^'
    spawn_link(${1:module}, ${2:function}, [${3:arg}]).

snippet     register
abbr        register(<name>, <pid>).
prev_word   '^'
    register(${1:name}, ${2:pid}).

snippet     trap_exit
abbr        process_flag(trap_exit, true).
prev_word   '^'
    process_flag(trap_exit, true).

