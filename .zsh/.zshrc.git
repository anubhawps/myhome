git_branch() {
    local git_dir branch

    git_dir=$(git rev-parse --git-dir 2> /dev/null) || return
    if test -d "$git_dir/../.dotest"; then
        branch="$(git symbolic-ref HEAD 2>/dev/null)"
    elif test -f "$git_dir/.dotest-merge/interactive"; then
        branch="$(cat "$git_dir/.dotest-merge/head-name")"
    elif test -d "$git_dir/.dotest-merge"; then
        branch="$(cat "$git_dir/.dotest-merge/head-name")"
    elif test -f "$git_dir/MERGE_HEAD"; then
        branch="$(git symbolic-ref HEAD 2>/dev/null)"
    else
        branch="$(git symbolic-ref HEAD 2>/dev/null)" || \
            branch="$(git describe --exact-match HEAD 2>/dev/null)" || \
            branch="$(cut -c1-7 "$git_dir/HEAD")..."
    fi

    echo -n "${branch#refs/heads/}"
}

git_state() {
    local git_dir state

    git_dir=$(git rev-parse --git-dir 2> /dev/null) || return
    if test -d "$git_dir/../.dotest"; then
        if test -f "$git_dir/../.dotest/rebasing"; then
            state="rebase"
        elif test -f "$git_dir/../.dotest/applying"; then
            state="am"
        else
            state="am/rebase"
        fi
    elif test -f "$git_dir/.dotest-merge/interactive"; then
        state="rebase-i"
    elif test -d "$git_dir/.dotest-merge"; then
        state="rebase-m"
    elif test -f "$git_dir/MERGE_HEAD"; then
        state="merge"
    else
        test -f "$git_dir/BISECT_LOG" && state="bisect"
    fi

    echo -n "${state}"
}

git_top_dir() {
    local git_dir
    git_dir=$(git rev-parse --git-dir 2> /dev/null) || return

    case $git_dir in 
        .git) git_dir="$(pwd)/.git";;
    esac 

    echo "${${git_dir:h}/$HOME/~}"
}

